"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[88445],{88445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>r});var a=t(7896),o=(t(2784),t(30876));const l={},s=void 0,d={unversionedId:"auto-generated/previews/angular/modal-by-template.ts",id:"auto-generated/previews/angular/modal-by-template.ts",title:"modal-by-template.ts",description:"\x3c!--",source:"@site/docs/auto-generated/previews/angular/modal-by-template.ts.md",sourceDirName:"auto-generated/previews/angular",slug:"/auto-generated/previews/angular/modal-by-template.ts",permalink:"/version-dev/docs/auto-generated/previews/angular/modal-by-template.ts",draft:!1,editUrl:"https://www.github.com/siemens/ix/edit/main/packages/documentation/docs/auto-generated/previews/angular/modal-by-template.ts.md",tags:[],version:"current",frontMatter:{}},i={},r=[],m={toc:r};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { ModalService } from '@siemens/ix-angular';\n\n@Component({\n  selector: 'app-example',\n  template: `\n    <ix-button (click)=\"openModal()\">Show modal</ix-button>\n\n    <ng-template #customModal let-modal>\n      <div>\n        <ix-modal-header> Message headline </ix-modal-header>\n        <ix-modal-content\n          >Message text lorem ipsum: {{ modal.data }}</ix-modal-content\n        >\n        <ix-modal-footer>\n          <ix-button\n            outline\n            class=\"dismiss-modal\"\n            (click)=\"modal.dismiss('dismiss')\"\n          >\n            Cancel\n          </ix-button>\n          <ix-button class=\"close-modal\" (click)=\"modal.close('okay')\">\n            OK\n          </ix-button>\n        </ix-modal-footer>\n      </div>\n    </ng-template>\n  `,\n})\nexport default class Modal {\n  @ViewChild('customModal', { read: TemplateRef })\n  customModalRef!: TemplateRef<any>;\n\n  constructor(private readonly modalService: ModalService) {}\n\n  async openModal() {\n    const instance = await this.modalService.open({\n      content: this.customModalRef,\n      data: 'Some data',\n    });\n\n    instance.onClose.on((a) => {\n      console.log(a);\n    });\n\n    instance.htmlElement.addEventListener(\n      'keydown',\n      (keyboardEvent: KeyboardEvent) => {\n        console.log(keyboardEvent.key);\n      }\n    );\n  }\n}\n")))}c.isMDXComponent=!0}}]);