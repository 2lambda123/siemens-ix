"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1879],{1879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7896),r=(n(2784),n(30876));const i={},o=void 0,s={unversionedId:"auto-generated/previews/react/validation",id:"auto-generated/previews/react/validation",title:"validation",description:"\x3c!--",source:"@site/docs/auto-generated/previews/react/validation.md",sourceDirName:"auto-generated/previews/react",slug:"/auto-generated/previews/react/validation",permalink:"/version-dev/docs/auto-generated/previews/react/validation",draft:!1,editUrl:"https://www.github.com/siemens/ix/edit/main/packages/documentation/docs/auto-generated/previews/react/validation.md",tags:[],version:"current",frontMatter:{}},l={},d=[],m={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { IxValidationTooltip } from \'@siemens/ix-react\';\nimport React, { useState } from \'react\';\nimport { useForm } from \'react-hook-form\';\n\nexport default () => {\n  const [wasValidated, setValidation] = useState(false);\n  const { register, handleSubmit, formState } = useForm({\n    defaultValues: {\n      firstName: \'\',\n      lastName: \'\',\n      userName: \'\',\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    console.log(data);\n    setValidation(true);\n  };\n\n  return (\n    <>\n      <form\n        className={`row g-3 needs-validation`}\n        noValidate\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <div className="col-md-4">\n          <label htmlFor="validationCustom01" className="form-label">\n            First name\n          </label>\n          <input\n            type="text"\n            className={`form-control ${\n              formState.errors.firstName ? \'is-invalid\' : \'\'\n            }`}\n            id="validationCustom01"\n            {...register(\'firstName\', {\n              required: true,\n            })}\n          />\n          <div className="valid-feedback">Looks good!</div>\n        </div>\n        <div className="col-md-4">\n          <IxValidationTooltip message="Error hint textError hint textError hint textError hint textError hint textError hint textError hint textError hint textError hint text">\n            <label htmlFor="validationCustom02" className="form-label">\n              Last name\n            </label>\n            <input\n              type="text"\n              className={`form-control ${\n                formState.errors.lastName ? \'is-invalid\' : \'\'\n              }`}\n              id="validationCustom02"\n              {...register(\'lastName\', {\n                required: true,\n              })}\n            />\n          </IxValidationTooltip>\n        </div>\n        <div className="col-md-4">\n          <label htmlFor="validationCustomUsername" className="form-label">\n            Username\n          </label>\n          <input\n            type="text"\n            className={`form-control ${\n              formState.errors.userName ? \'is-invalid\' : \'\'\n            }`}\n            id="validationCustomUsername"\n            aria-describedby="inputGroupPrepend"\n            {...register(\'userName\', {\n              required: true,\n            })}\n          />\n          <div className="invalid-feedback">Please choose a username.</div>\n        </div>\n        <div className="col-12">\n          <button className="btn btn-primary" type="submit">\n            Submit form\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n')))}c.isMDXComponent=!0}}]);